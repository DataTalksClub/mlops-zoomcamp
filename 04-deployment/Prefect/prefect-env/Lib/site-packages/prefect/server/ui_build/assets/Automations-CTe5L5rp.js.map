{"version":3,"file":"Automations-CTe5L5rp.js","sources":["../../src/components/AutomationCard.vue","../../src/pages/Automations.vue"],"sourcesContent":["<template>\n  <p-card class=\"automation-card\">\n    <p-content>\n      <p-content secondary>\n        <div class=\"automation-card__header\">\n          <p-link class=\"automation-card__name\" :to=\"routes.automation(automation.id)\">\n            {{ automation.name }}\n          </p-link>\n          <div class=\"automation-card__header-actions\">\n            <AutomationToggle :automation=\"automation\" @update=\"emit('update')\" />\n            <AutomationMenu :automation=\"automation\" @delete=\"emit('update')\" />\n          </div>\n        </div>\n        <template v-if=\"automation.description\">\n          <p class=\"automation-card__description\">\n            {{ automation.description }}\n          </p>\n        </template>\n      </p-content>\n\n      <p-content secondary>\n        <span class=\"automation-card__label\">Trigger</span>\n        <AutomationTriggerDescription :trigger=\"automation.trigger\" />\n      </p-content>\n\n      <p-content secondary>\n        <span class=\"automation-card__label\">{{ toPluralString('Action', automation.actions.length) }}</span>\n        <template v-for=\"action in automation.actions\" :key=\"action.id\">\n          <p-card><AutomationActionDescription :action=\"action\" /></p-card>\n        </template>\n      </p-content>\n    </p-content>\n  </p-card>\n</template>\n\n<script lang=\"ts\" setup>\n  import { toPluralString } from '@prefecthq/prefect-design'\n  import { AutomationMenu, AutomationToggle, AutomationTriggerDescription, AutomationActionDescription, useWorkspaceRoutes } from '@prefecthq/prefect-ui-library'\n  import { Automation } from '@/types/automation'\n\n  defineProps<{\n    automation: Automation,\n  }>()\n\n  const emit = defineEmits<{\n    (event: 'update'): void,\n  }>()\n\n  const routes = useWorkspaceRoutes()\n</script>\n\n<style>\n.automation-card__header { @apply\n  flex\n  gap-2\n  items-center\n  justify-between\n}\n\n.automation-card__header-actions { @apply\n  flex\n  gap-2\n  items-center\n}\n\n.automation-card__name { @apply\n  text-lg\n}\n\n.automation-card__description { @apply\n  text-sm\n}\n\n.automation-card__label { @apply\n  font-medium\n  mr-2\n}\n</style>","<template>\n  <p-layout-default class=\"automations\">\n    <template #header>\n      <PageHeading :crumbs=\"crumbs\">\n        <template #after-crumbs>\n          <p-button size=\"sm\" icon=\"PlusIcon\" :to=\"routes.automationCreate()\" />\n        </template>\n\n        <template v-if=\"!empty\" #actions>\n          <DocumentationButton :to=\"localization.docs.automations\">\n            Documentation\n          </DocumentationButton>\n        </template>\n      </PageHeading>\n    </template>\n    <template v-if=\"loaded\">\n      <template v-if=\"empty\">\n        <AutomationsPageEmptyState />\n      </template>\n      <template v-else>\n        <ResultsCount :count=\"automations.length\" label=\"automation\" />\n\n        <p-virtual-scroller :items=\"automations\" class=\"automations-list\">\n          <template #default=\"{ item: automation }\">\n            <AutomationCard :automation=\"automation\" @update=\"subscription.refresh\" />\n          </template>\n        </p-virtual-scroller>\n      </template>\n    </template>\n  </p-layout-default>\n</template>\n\n<script lang=\"ts\" setup>\n  import { PageHeading, ResultsCount, AutomationsPageEmptyState, DocumentationButton, localization, useWorkspaceRoutes } from '@prefecthq/prefect-ui-library'\n  import { useSubscription } from '@prefecthq/vue-compositions'\n  import { computed } from 'vue'\n  import AutomationCard from '@/components/AutomationCard.vue'\n  import { usePageTitle } from '@/compositions/usePageTitle'\n  import { usePrefectApi } from '@/compositions/usePrefectApi'\n\n  const routes = useWorkspaceRoutes()\n\n  usePageTitle('Automations')\n\n  const crumbs = [{ text: 'Automations' }]\n  const api = usePrefectApi()\n\n  const subscription = useSubscription(api.automations.getAutomations)\n  const automations = computed(() => subscription.response ?? [])\n\n  const loaded = computed(() => subscription.executed)\n  const empty = computed(() => automations.value.length === 0)\n</script>\n\n<style>\n.automations {\n  --virtual-scroller-item-gap: theme('spacing.2')\n}\n</style>"],"names":["emit","__emit","routes","useWorkspaceRoutes","usePageTitle","crumbs","api","usePrefectApi","subscription","useSubscription","automations","computed","loaded","empty"],"mappings":"4nBA4CE,MAAMA,EAAOC,EAIPC,EAASC,q/BCRf,MAAMD,EAASC,IAEfC,EAAa,aAAa,EAE1B,MAAMC,EAAS,CAAC,CAAE,KAAM,aAAe,CAAA,EACjCC,EAAMC,IAENC,EAAeC,EAAgBH,EAAI,YAAY,cAAc,EAC7DI,EAAcC,EAAS,IAAMH,EAAa,UAAY,CAAE,CAAA,EAExDI,EAASD,EAAS,IAAMH,EAAa,QAAQ,EAC7CK,EAAQF,EAAS,IAAMD,EAAY,MAAM,SAAW,CAAC"}