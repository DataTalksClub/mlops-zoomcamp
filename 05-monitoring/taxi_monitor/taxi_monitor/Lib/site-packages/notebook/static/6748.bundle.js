"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[6748],{86748:(e,n,o)=>{o.r(n),o.d(n,{default:()=>P});var t=o(44604),r=o(53312),l=o(51429),s=o(81002),a=o(67260),c=o(71427),i=o(86810),d=o(29879),u=o(81221),p=o(23295),m=o(12030),C=o(35613),v=o(33625),g=o(20998),h=o(2549),b=o(14421);const f={id:"@jupyterlab/console-extension:foreign",description:"Add foreign handler of IOPub messages to the console.",requires:[a.IConsoleTracker,p.ISettingRegistry,m.ITranslator],optional:[r.ICommandPalette],activate:function(e,n,o,t,r){var l;const s=t.load("jupyterlab"),{shell:c}=e;n.widgetAdded.connect(((e,n)=>{const t=n.console,r=new a.ForeignHandler({sessionContext:t.sessionContext,parent:t});k.foreignHandlerProperty.set(t,r),o.get("@jupyterlab/console-extension:tracker","showAllKernelActivity").then((({composite:e})=>{const n=e;r.enabled=n})),t.disposed.connect((()=>{r.dispose()}))}));const{commands:i}=e,d=s.__("Console"),u="console:toggle-show-all-kernel-activity";i.addCommand(u,{label:e=>s.__("Show All Kernel Activity"),execute:e=>{const o=function(e){const o=n.currentWidget;return!1!==e.activate&&o&&c.activateById(o.id),o}(e);if(!o)return;const t=k.foreignHandlerProperty.get(o.console);t&&(t.enabled=!t.enabled)},isToggled:()=>{var e;return null!==n.currentWidget&&!!(null===(e=k.foreignHandlerProperty.get(n.currentWidget.console))||void 0===e?void 0:e.enabled)},isEnabled:()=>null!==n.currentWidget&&n.currentWidget===c.currentWidget});const p=()=>{i.notifyCommandChanged(u)};n.currentChanged.connect(p),null===(l=c.currentChanged)||void 0===l||l.connect(p),r&&r.addItem({command:u,category:d,args:{isPalette:!0}})},autoStart:!0},y=f;var k;!function(e){e.foreignHandlerProperty=new b.AttachedProperty({name:"foreignHandler",create:()=>{}})}(k||(k={}));const _={id:"@jupyterlab/console-extension:cell-executor",description:"Provides the console cell executor.",autoStart:!0,provides:a.IConsoleCellExecutor,activate:()=>Object.freeze({runCell:a.runCell})};var x;!function(e){e.autoClosingBrackets="console:toggle-autoclosing-brackets",e.create="console:create",e.clear="console:clear",e.runUnforced="console:run-unforced",e.runForced="console:run-forced",e.linebreak="console:linebreak",e.interrupt="console:interrupt-kernel",e.restart="console:restart-kernel",e.closeAndShutdown="console:close-and-shutdown",e.open="console:open",e.inject="console:inject",e.changeKernel="console:change-kernel",e.getKernel="console:get-kernel",e.interactionMode="console:interaction-mode",e.redo="console:redo",e.replaceSelection="console:replace-selection",e.shutdown="console:shutdown",e.undo="console:undo",e.invokeCompleter="completer:invoke-console",e.selectCompleter="completer:select-console"}(x||(x={}));const w={id:"@jupyterlab/console-extension:tracker",description:"Provides the console widget tracker.",provides:a.IConsoleTracker,requires:[a.ConsolePanel.IContentFactory,l.IEditorServices,a.IConsoleCellExecutor,u.IRenderMimeRegistry,p.ISettingRegistry],optional:[t.ILayoutRestorer,c.IDefaultFileBrowser,d.IMainMenu,r.ICommandPalette,i.ILauncher,t.ILabStatus,r.ISessionContextDialogs,C.IFormRendererRegistry,m.ITranslator],activate:async function(e,n,o,t,l,s,c,i,d,u,p,b,f,y,k){var _;const w=null!=k?k:m.nullTranslator,I=w.load("jupyterlab"),E=e.serviceManager,{commands:S,shell:P}=e,M=I.__("Console"),j=null!=f?f:new r.SessionContextDialogs({translator:w}),T=new r.WidgetTracker({namespace:"console"});async function A(e){var r,c;await E.ready;const i=new a.ConsolePanel({manager:E,contentFactory:n,mimeTypeService:o.mimeTypeService,rendermime:l,sessionDialogs:j,executor:t,translator:w,setBusy:null!==(r=b&&(()=>b.setBusy()))&&void 0!==r?r:void 0,...e}),d=(await s.get("@jupyterlab/console-extension:tracker","interactionMode")).composite;return i.console.node.dataset.jpInteractionMode=d,await T.add(i),i.sessionContext.propertyChanged.connect((()=>{T.save(i)})),P.add(i,"main",{ref:e.ref,mode:e.insertMode,activate:!1!==e.activate,type:null!==(c=e.type)&&void 0!==c?c:"Console"}),i}c&&c.restore(T,{command:x.create,args:e=>{const{path:n,name:o,kernelPreference:t}=e.console.sessionContext;return{path:n,name:o,kernelPreference:{...t}}},name:e=>{var n;return null!==(n=e.console.sessionContext.path)&&void 0!==n?n:g.UUID.uuid4()},when:E.ready}),p&&E.ready.then((()=>{let e=null;const n=()=>{e&&(e.dispose(),e=null);const n=E.kernelspecs.specs;if(n){e=new h.DisposableSet;for(const o in n.kernelspecs){const t=o===n.default?0:1/0,r=n.kernelspecs[o],l=r.resources["logo-svg"]||r.resources["logo-64x64"];e.add(p.add({command:x.create,args:{isLauncher:!0,kernelPreference:{name:o}},category:I.__("Console"),rank:t,kernelIconUrl:l,metadata:{kernel:g.JSONExt.deepCopy(r.metadata||{})}}))}}};n(),E.kernelspecs.specsChanged.connect(n)}));const K="@jupyterlab/console-extension:tracker";let R,B={};async function U(e){R=(await s.get(K,"interactionMode")).composite,B=(await s.get(K,"promptCellConfig")).composite;const n=e=>{var n,o;e.console.node.dataset.jpInteractionMode=R,e.console.editorConfig=B,null===(o=null===(n=e.console.promptCell)||void 0===n?void 0:n.editor)||void 0===o||o.setOptions(B)};e?n(e):T.forEach(n)}if(s.pluginChanged.connect(((e,n)=>{n===K&&U()})),await U(),y){const e=y.getRenderer("@jupyterlab/codemirror-extension:plugin.defaultConfig");e&&y.addRenderer("@jupyterlab/console-extension:tracker.promptCellConfig",e)}function W(){return null!==T.currentWidget&&T.currentWidget===P.currentWidget}function D(e){const n=T.currentWidget;return!1!==e.activate&&n&&P.activateById(n.id),null!=n?n:null}T.widgetAdded.connect(((e,n)=>{U(n)})),S.addCommand(x.autoClosingBrackets,{execute:async e=>{var n;B.autoClosingBrackets=!!(null!==(n=e.force)&&void 0!==n?n:!B.autoClosingBrackets),await s.set(K,"promptCellConfig",B)},label:I.__("Auto Close Brackets for Code Console Prompt"),isToggled:()=>B.autoClosingBrackets}),S.addCommand(x.open,{label:I.__("Open a console for the provided `path`."),execute:e=>{const n=e.path,o=T.find((e=>{var o;return(null===(o=e.console.sessionContext.session)||void 0===o?void 0:o.path)===n}));return o?(!1!==e.activate&&P.activateById(o.id),o):E.ready.then((()=>(0,v.find)(E.sessions.running(),(e=>e.path===n))?A(e):Promise.reject(`No running kernel session for path: ${n}`)))}}),S.addCommand(x.create,{label:e=>{var n,o,t,r;if(e.isPalette)return I.__("New Console");if(e.isLauncher&&e.kernelPreference){const l=e.kernelPreference;return null!==(r=null===(t=null===(o=null===(n=E.kernelspecs)||void 0===n?void 0:n.specs)||void 0===o?void 0:o.kernelspecs[l.name||""])||void 0===t?void 0:t.display_name)&&void 0!==r?r:""}return I.__("Console")},icon:e=>e.isPalette?void 0:C.consoleIcon,execute:e=>{var n;return A({basePath:null!==(n=e.basePath||e.cwd||(null==i?void 0:i.model.path))&&void 0!==n?n:"",...e})}}),S.addCommand(x.undo,{execute:e=>{var n;const o=D(e);if(!o)return;const t=null===(n=o.console.promptCell)||void 0===n?void 0:n.editor;t&&t.undo()},isEnabled:e=>{var n,o,t;if(!W())return!1;const r=null===(t=null===(o=null===(n=D(e))||void 0===n?void 0:n.console)||void 0===o?void 0:o.promptCell)||void 0===t?void 0:t.editor;return!!r&&r.model.sharedModel.canUndo()},icon:C.undoIcon.bindprops({stylesheet:"menuItem"}),label:I.__("Undo")}),S.addCommand(x.redo,{execute:e=>{var n;const o=D(e);if(!o)return;const t=null===(n=o.console.promptCell)||void 0===n?void 0:n.editor;t&&t.redo()},isEnabled:e=>{var n,o,t;if(!W())return!1;const r=null===(t=null===(o=null===(n=D(e))||void 0===n?void 0:n.console)||void 0===o?void 0:o.promptCell)||void 0===t?void 0:t.editor;return!!r&&r.model.sharedModel.canRedo()},icon:C.redoIcon.bindprops({stylesheet:"menuItem"}),label:I.__("Redo")}),S.addCommand(x.clear,{label:I.__("Clear Console Cells"),execute:e=>{const n=D(e);n&&n.console.clear()},isEnabled:W}),S.addCommand(x.runUnforced,{label:I.__("Run Cell (unforced)"),execute:e=>{const n=D(e);if(n)return n.console.execute()},isEnabled:W}),S.addCommand(x.runForced,{label:I.__("Run Cell (forced)"),execute:e=>{const n=D(e);if(n)return n.console.execute(!0)},isEnabled:W}),S.addCommand(x.linebreak,{label:I.__("Insert Line Break"),execute:e=>{const n=D(e);n&&n.console.insertLinebreak()},isEnabled:W}),S.addCommand(x.replaceSelection,{label:I.__("Replace Selection in Console"),execute:e=>{const n=D(e);if(!n)return;const o=e.text||"";n.console.replaceSelection(o)},isEnabled:W}),S.addCommand(x.interrupt,{label:I.__("Interrupt Kernel"),execute:e=>{var n;const o=D(e);if(!o)return;const t=null===(n=o.console.sessionContext.session)||void 0===n?void 0:n.kernel;return t?t.interrupt():void 0},isEnabled:W}),S.addCommand(x.restart,{label:I.__("Restart Kernel…"),execute:e=>{const n=D(e);if(n)return j.restart(n.console.sessionContext)},isEnabled:W}),S.addCommand(x.shutdown,{label:I.__("Shut Down"),execute:e=>{const n=D(e);if(n)return n.console.sessionContext.shutdown()}}),S.addCommand(x.closeAndShutdown,{label:I.__("Close and Shut Down…"),execute:e=>{const n=D(e);if(n)return(0,r.showDialog)({title:I.__("Shut down the console?"),body:I.__('Are you sure you want to close "%1"?',n.title.label),buttons:[r.Dialog.cancelButton({ariaLabel:I.__("Cancel console Shut Down")}),r.Dialog.warnButton({ariaLabel:I.__("Confirm console Shut Down")})]}).then((e=>!!e.button.accept&&S.execute(x.shutdown,{activate:!1}).then((()=>(n.dispose(),!0)))))},isEnabled:W}),S.addCommand(x.inject,{label:I.__("Inject some code in a console."),execute:e=>{const n=e.path;T.find((o=>{var t;return(null===(t=o.console.sessionContext.session)||void 0===t?void 0:t.path)===n&&(!1!==e.activate&&P.activateById(o.id),o.console.inject(e.code,e.metadata),!0)}))},isEnabled:W}),S.addCommand(x.changeKernel,{label:I.__("Change Kernel…"),execute:e=>{const n=D(e);if(n)return j.selectKernel(n.console.sessionContext)},isEnabled:W}),S.addCommand(x.getKernel,{label:I.__("Get Kernel"),execute:e=>{var n;const o=D({activate:!1,...e});if(o)return null===(n=o.sessionContext.session)||void 0===n?void 0:n.kernel},isEnabled:W});const F=[x.create],L=()=>{Object.values(x).filter((e=>!F.includes(e))).forEach((n=>e.commands.notifyCommandChanged(n)))};T.currentChanged.connect(L),null===(_=P.currentChanged)||void 0===_||_.connect(L),u&&[x.create,x.linebreak,x.clear,x.runUnforced,x.runForced,x.restart,x.interrupt,x.changeKernel,x.closeAndShutdown].forEach((e=>{u.addItem({command:e,category:M,args:{isPalette:!0}})})),d&&(d.fileMenu.closeAndCleaners.add({id:x.closeAndShutdown,isEnabled:W}),d.kernelMenu.kernelUsers.changeKernel.add({id:x.changeKernel,isEnabled:W}),d.kernelMenu.kernelUsers.clearWidget.add({id:x.clear,isEnabled:W}),d.kernelMenu.kernelUsers.interruptKernel.add({id:x.interrupt,isEnabled:W}),d.kernelMenu.kernelUsers.restartKernel.add({id:x.restart,isEnabled:W}),d.kernelMenu.kernelUsers.shutdownKernel.add({id:x.shutdown,isEnabled:W}),d.runMenu.codeRunners.run.add({id:x.runForced,isEnabled:W}),d.editMenu.clearers.clearCurrent.add({id:x.clear,isEnabled:W}),d.editMenu.undoers.redo.add({id:x.redo,isEnabled:W}),d.editMenu.undoers.undo.add({id:x.undo,isEnabled:W}),d.helpMenu.getKernel.add({id:x.getKernel,isEnabled:W}));const O={notebook:I.__("Execute with Shift+Enter"),terminal:I.__("Execute with Enter")};return S.addCommand(x.interactionMode,{label:e=>{var n;return null!==(n=O[e.interactionMode])&&void 0!==n?n:"Set the console interaction mode."},execute:async e=>{try{await s.set(K,"interactionMode",e.interactionMode)}catch(e){console.error(`Failed to set ${K}:keyMap - ${e.message}`)}},isToggled:e=>e.interactionMode===R}),T},autoStart:!0},I={id:"@jupyterlab/console-extension:factory",description:"Provides the console widget content factory.",provides:a.ConsolePanel.IContentFactory,requires:[l.IEditorServices],autoStart:!0,activate:(e,n)=>{const o=n.factoryService.newInlineEditor;return new a.ConsolePanel.ContentFactory({editorFactory:o})}},E={id:"@jupyterlab/console-extension:kernel-status",description:"Adds the console to the kernel status indicator model.",autoStart:!0,requires:[a.IConsoleTracker,r.IKernelStatusModel],activate:(e,n,o)=>{o.addSessionProvider((e=>e&&n.has(e)?e.sessionContext:null))}},S={id:"@jupyterlab/console-extension:cursor-position",description:"Adds the console to the code editor cursor position model.",autoStart:!0,requires:[a.IConsoleTracker,l.IPositionModel],activate:(e,n,o)=>{let t=null;o.addEditorProvider((async e=>{let r=null;if(e!==t){if(null==t||t.console.promptCellCreated.disconnect(o.update),t=null,e&&n.has(e)){e.console.promptCellCreated.connect(o.update);const n=e.console.promptCell;r=null,n&&(await n.ready,r=n.editor),t=e}}else if(e){const n=e.console.promptCell;r=null,n&&(await n.ready,r=n.editor)}return r}))}},P=[I,w,y,E,S,{id:"@jupyterlab/console-extension:completer",description:"Adds completion to the console.",autoStart:!0,requires:[a.IConsoleTracker],optional:[s.ICompletionProviderManager,m.ITranslator,r.ISanitizer],activate:function(e,n,o,t,l){if(!o)return;const s=(null!=t?t:m.nullTranslator).load("jupyterlab"),a=null!=l?l:new r.Sanitizer;e.commands.addCommand(x.invokeCompleter,{label:s.__("Display the completion helper."),execute:()=>{const e=n.currentWidget&&n.currentWidget.id;if(e)return o.invoke(e)}}),e.commands.addCommand(x.selectCompleter,{label:s.__("Select the completion suggestion."),execute:()=>{const e=n.currentWidget&&n.currentWidget.id;if(e)return o.select(e)}}),e.commands.addKeyBinding({command:x.selectCompleter,keys:["Enter"],selector:".jp-ConsolePanel .jp-mod-completer-active"});const c=async(e,n)=>{var t,r;const l={editor:null!==(r=null===(t=n.console.promptCell)||void 0===t?void 0:t.editor)&&void 0!==r?r:null,session:n.console.sessionContext.session,widget:n};await o.updateCompleter(l),n.console.promptCellCreated.connect(((e,t)=>{const r={editor:t.editor,session:e.sessionContext.session,widget:n,sanitzer:a};o.updateCompleter(r).catch(console.error)})),n.console.sessionContext.sessionChanged.connect((()=>{var e,t;const r={editor:null!==(t=null===(e=n.console.promptCell)||void 0===e?void 0:e.editor)&&void 0!==t?t:null,session:n.console.sessionContext.session,widget:n,sanitizer:a};o.updateCompleter(r).catch(console.error)}))};n.widgetAdded.connect(c),o.activeProvidersChanged.connect((()=>{n.forEach((e=>{c(0,e).catch((e=>console.error(e)))}))}))}},_]}}]);