name: Deploy-Pipeline
on:
  push:
    branches:
      - 'develop'
#    paths:
#      - '06-best-practices/code/**'

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/develop'
    outputs:
      image_tag: ${{ steps.build-image-step.outputs.image_tag }}
      ecr_repo: ${{ steps.tf-apply.outputs.ecr_repo }}
      predictions_stream_name: ${{ steps.tf-apply.outputs.predictions_stream_name }}
      model_bucket: ${{ steps.tf-apply.outputs.model_bucket }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      - uses: hashicorp/setup-terraform@v2
        with:
          # terraform_version: 1.1.7
          terraform_wrapper: false

      - name: TF plan
        id: tf-plan
        working-directory: '06-best-practices/code/infrastructure'
        run: |
          terraform init && terraform plan -var-file=vars/prod.tfvars

      - name: TF Apply
        id: tf-apply
        working-directory: '06-best-practices/code/infrastructure'
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo)"
          echo "::set-output name=predictions_stream_name::$(terraform output predictions_stream_name | xargs)"
          echo "::set-output name=model_bucket::$(terraform output model_bucket | xargs)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        working-directory: "06-best-practices/code/infrastructure"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: echo ${{ steps.tf-apply.outputs.ecr_repo }} | xargs
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo ${{ steps.tf-apply.outputs.ecr_repo }}
          docker build --build-arg -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Update Lambda and Test e2e
        env:
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          PREDICTIONS_STREAM_NAME: ${{ steps.tf-apply.outputs.predictions_stream_name }}
          MODEL_BUCKET: ${{ steps.tf-apply.outputs.model_bucket }}
        run: |
          variables="{PREDICTIONS_STREAM_NAME=${PREDICTIONS_STREAM_NAME}, MODEL_BUCKET=${MODEL_BUCKET_PROD}, RUN_ID=${RUN_ID}}"
          aws lambda update-function-code \
          --function-name $YOUR-FUNC-NAME \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ steps.build-image-step.outputs.image_tag }} \
          --environment "Variables=${variables}"
          --publish
