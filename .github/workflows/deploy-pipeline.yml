name: Deploy-Pipeline
on:
  push:
    branches:
      - 'develop'
#    paths:
#      - '06-best-practices/code/**'

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: TF plan
        id: tf-plan
        working-directory: '06-best-practices/code/infrastructure'
        run: |
          terraform init && terraform plan -var-file=vars/prod.tfvars

      - name: TF Apply
        id: tf-apply
        working-directory: '06-best-practices/code/infrastructure'
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"
          echo "::set-output name=predictions_stream_name::$(terraform output predictions_stream_name | xargs)"
          echo "::set-output name=model_bucket::$(terraform output model_bucket | xargs)"
          echo "::set-output name=lambda_function::$(terraform output lambda_function | xargs)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        working-directory: "06-best-practices/code"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          # IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Update Lambda
        env:
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          PREDICTIONS_STREAM_NAME: ${{ steps.tf-apply.outputs.predictions_stream_name }}
          LAMBDA_FUNCTION: ${{ steps.tf-apply.outputs.lambda_function }}
          MODEL_BUCKET: ${{ steps.tf-apply.outputs.model_bucket }}
          MODEL_BUCKET_DEV: ${{ secrets.MODEL_BUCKET_DEV }}
        run: |
          export RUN_ID=$(aws s3api list-objects-v2 --bucket ${MODEL_BUCKET_DEV} \
          --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -f2 -d/)

          aws s3 sync s3://$MODEL_BUCKET_DEV s3://$MODEL_BUCKET

          variables="{ \
          PREDICTIONS_STREAM_NAME=$PREDICTIONS_STREAM_NAME, MODEL_BUCKET=$MODEL_BUCKET, RUN_ID=$RUN_ID \
          }"

          STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "eu-west-1" --query 'Configuration.LastUpdateStatus' --output text)
          while [[ "$STATE" == "InProgress" ]]
          do
              echo "sleep 5sec ...."
              sleep 5s
              STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "eu-west-1" --query 'Configuration.LastUpdateStatus' --output text)
              echo $STATE
          done

          aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION \
          --environment "Variables=${variables}"
