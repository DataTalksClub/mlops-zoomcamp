name: Deploy-Pipeline
on:
  push:
    branches:
      - 'develop'
    paths:
      - '06-best-practices/code/**'
strategy:
  fail-fast: true # stop others if one fails
env:
  AWS_DEFAULT_REGION: "eu-west-1"
jobs:
  terraform-plan-apply:
    if: github.event.pull_request.merged
    env:
      # TODO: Setup AWS secret keys in repo settings (need permissions)
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: hashicorp/setup-terraform@v2
      - name: TF plan
        working-directory: "06-best-practices/code/infrastructure"
        run: terraform init && terraform plan -var-file=vars/prod.tfvars

      - name: TF plan
        working-directory: "06-best-practices/code/infrastructure"
        run: terraform apply -var-file=vars/prod.tfvars
        # TODO: set envs from .env_template & tf apply output

  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged
    outputs:
      image_tag: ${{ steps.build-image-step.outputs.image_tag }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        working-directory: "06-best-practices/code/infrastructure"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: your-repo-name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image_tag::$IMAGE_TAG"

  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged
    needs: build-and-push
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Update Lambda and Test e2e
#        run: |
#        # TODO: use envs from .env_template & tf apply output
#          variables="{PREDICTIONS_STREAM_NAME=${PREDICTIONS_STREAM_NAME}, MODEL_BUCKET=${MODEL_BUCKET_PROD}, RUN_ID=${RUN_ID}}"
#          aws lambda update-function-code \
#          --function-name $YOUR-FUNC-NAME \
#          --image-uri ${{ steps.login-ecr.outputs.registry }}/$YOUR-REPO-NAME:${{ needs.build-and-push.outputs.image_tag }} \
#          --environment "Variables=${variables}"
#          --publish
