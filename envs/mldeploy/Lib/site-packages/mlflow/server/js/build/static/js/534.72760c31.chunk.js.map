{"version":3,"file":"static/js/534.72760c31.chunk.js","mappings":"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","sources":["model-registry/components/PromoteModelButton.tsx","model-registry/components/DirectTransitionForm.tsx","model-registry/components/ModelStageTransitionDropdown.tsx","model-registry/components/aliases/ModelVersionViewAliasEditor.tsx","model-registry/components/ModelVersionView.tsx","model-registry/utils/VersionUtils.ts","model-registry/components/ModelVersionPage.tsx","model-registry/components/RegisterModelForm.tsx","model-registry/components/SchemaTable.tsx","model-registry/utils/SearchUtils.ts"],"sourcesContent":["import { Button, Modal, Typography } from '@databricks/design-system';\nimport { debounce } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { useNavigate } from '../../common/utils/RoutingUtils';\nimport Utils from '../../common/utils/Utils';\nimport { getModelNameFilter } from '../../model-registry/utils/SearchUtils';\nimport { ReduxState, ThunkDispatch } from '../../redux-types';\nimport { createModelVersionApi, createRegisteredModelApi, searchRegisteredModelsApi } from '../actions';\nimport { ModelRegistryRoutes } from '../routes';\nimport {\n  CREATE_NEW_MODEL_OPTION_VALUE,\n  MODEL_NAME_FIELD,\n  RegisterModelForm,\n  SELECTED_MODEL_FIELD,\n} from './RegisterModelForm';\nimport { ModelVersionInfoEntity } from '../../experiment-tracking/types';\n\nconst MAX_SEARCH_REGISTERED_MODELS = 5;\n\ntype PromoteModelButtonImplProps = {\n  modelVersion: ModelVersionInfoEntity;\n};\n\nexport const PromoteModelButton = (props: PromoteModelButtonImplProps) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n\n  const createRegisteredModelRequestId = useRef(getUUID());\n  const createModelVersionRequestId = useRef(getUUID());\n\n  const { modelVersion } = props;\n  const [visible, setVisible] = useState(false);\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const modelByName = useSelector((state: ReduxState) => state.entities.modelByName);\n\n  const form = useRef<any>();\n  const showRegisterModal = () => {\n    setVisible(true);\n  };\n\n  const hideRegisterModal = () => {\n    setVisible(false);\n  };\n\n  const resetAndClearModalForm = () => {\n    setVisible(false);\n    setConfirmLoading(false);\n  };\n\n  const handleRegistrationFailure = (e: any) => {\n    setConfirmLoading(false);\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  const handleSearchRegisteredModels = useCallback(\n    (input: any) => {\n      dispatch(searchRegisteredModelsApi(getModelNameFilter(input), MAX_SEARCH_REGISTERED_MODELS));\n    },\n    [dispatch],\n  );\n\n  const debouncedHandleSearchRegisteredModels = useMemo(\n    () => debounce(handleSearchRegisteredModels, 300),\n    [handleSearchRegisteredModels],\n  );\n\n  const handleCopyModel = () => {\n    form.current.validateFields().then((values: any) => {\n      setConfirmLoading(true);\n      const selectedModelName = values[SELECTED_MODEL_FIELD];\n      const copySource = 'models:/' + modelVersion.name + '/' + modelVersion.version;\n      if (selectedModelName === CREATE_NEW_MODEL_OPTION_VALUE) {\n        const newModelName = values[MODEL_NAME_FIELD];\n        dispatch(createRegisteredModelApi(newModelName, createRegisteredModelRequestId.current))\n          .then(() =>\n            dispatch(\n              createModelVersionApi(\n                newModelName,\n                copySource,\n                modelVersion.run_id,\n                modelVersion.tags,\n                createModelVersionRequestId.current,\n              ),\n            ),\n          )\n          .then((mvResult: any) => {\n            resetAndClearModalForm();\n            const { version } = mvResult.value['model_version'];\n            navigate(ModelRegistryRoutes.getModelVersionPageRoute(newModelName, version));\n          })\n          .catch(handleRegistrationFailure);\n      } else {\n        dispatch(\n          createModelVersionApi(\n            selectedModelName,\n            copySource,\n            modelVersion.run_id,\n            modelVersion.tags,\n            createModelVersionRequestId.current,\n          ),\n        )\n          .then((mvResult: any) => {\n            resetAndClearModalForm();\n            const { version } = mvResult.value['model_version'];\n            navigate(ModelRegistryRoutes.getModelVersionPageRoute(selectedModelName, version));\n          })\n          .catch(handleRegistrationFailure);\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch(searchRegisteredModelsApi());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (visible) {\n      dispatch(searchRegisteredModelsApi());\n    }\n  }, [dispatch, visible]);\n\n  const renderRegisterModelForm = () => {\n    return (\n      <>\n        <Typography.Paragraph css={{ marginTop: '-12px' }}>\n          <FormattedMessage\n            defaultMessage=\"Copy your MLflow models to another registered model for \n            simple model promotion across environments. For more mature production-grade setups, we\n            recommend setting up automated model training workflows to produce models in controlled\n            environments. <link>Learn more</link>\"\n            description=\"Model registry > OSS Promote model modal > description paragraph body\"\n            values={{\n              link: (chunks) => (\n                <Typography.Link\n                  href={\n                    'https://mlflow.org/docs/latest/model-registry.html' +\n                    '#promoting-an-mlflow-model-across-environments'\n                  }\n                  openInNewTab\n                >\n                  {chunks}\n                </Typography.Link>\n              ),\n            }}\n          />\n        </Typography.Paragraph>\n        <RegisterModelForm\n          modelByName={modelByName}\n          innerRef={form}\n          onSearchRegisteredModels={debouncedHandleSearchRegisteredModels}\n          isCopy\n        />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"promote-model-btn-wrapper\">\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_promotemodelbutton.tsx_165\"\n        className=\"promote-model-btn\"\n        type=\"primary\"\n        onClick={showRegisterModal}\n      >\n        <FormattedMessage\n          defaultMessage=\"Promote model\"\n          description=\"Button text to pomote the model to a different registered model\"\n        />\n      </Button>\n      <Modal\n        title={\n          <FormattedMessage\n            defaultMessage=\"Promote {sourceModelName} version {sourceModelVersion}\"\n            description=\"Modal title to pomote the model to a different registered model\"\n            values={{ sourceModelName: modelVersion.name, sourceModelVersion: modelVersion.version }}\n          />\n        }\n        // @ts-expect-error TS(2322): Type '{ children: Element; title: any; width: numb... Remove this comment to see the full error message\n        width={640}\n        visible={visible}\n        onOk={handleCopyModel}\n        okText={intl.formatMessage({\n          defaultMessage: 'Promote',\n          description: 'Confirmation text to promote the model',\n        })}\n        cancelText={intl.formatMessage({\n          defaultMessage: 'Cancel',\n          description: 'Cancel text to cancel the flow to copy the model',\n        })}\n        confirmLoading={confirmLoading}\n        onCancel={hideRegisterModal}\n        centered\n      >\n        {renderRegisterModelForm()}\n      </Modal>\n    </div>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { Form } from 'antd';\nimport { Checkbox, Tooltip } from '@databricks/design-system';\nimport React from 'react';\nimport { ACTIVE_STAGES, archiveExistingVersionToolTipText, Stages, StageTagComponents } from '../constants';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\ntype Props = {\n  innerRef?: any;\n  toStage?: string;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n};\n\nexport class DirectTransitionFormImpl extends React.Component<Props> {\n  render() {\n    const { toStage, innerRef } = this.props;\n\n    return (\n      <Form ref={innerRef} className=\"model-version-update-form\">\n        {/* prettier-ignore */}\n        {toStage && ACTIVE_STAGES.includes(toStage) && (\n          <Form.Item name=\"archiveExistingVersions\" initialValue=\"true\" valuePropName=\"checked\" preserve={false}>\n            <Checkbox>\n              <Tooltip title={archiveExistingVersionToolTipText(toStage)}>\n                <FormattedMessage\n                  defaultMessage=\"Transition existing {currentStage} model versions to\n                    {archivedStage}\"\n                  description=\"Description text for checkbox for archiving existing model versions\n                    in the toStage for model version stage transition\"\n                  values={{\n                    currentStage: StageTagComponents[toStage],\n                    archivedStage: StageTagComponents[Stages.ARCHIVED],\n                  }}\n                />\n                &nbsp;\n              </Tooltip>\n            </Checkbox>\n          </Form.Item>\n        )}\n      </Form>\n    );\n  }\n}\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const DirectTransitionForm = injectIntl(DirectTransitionFormImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Dropdown, Menu, Modal, ChevronDownIcon, ArrowRightIcon } from '@databricks/design-system';\nimport { Stages, StageTagComponents, ActivityTypes } from '../constants';\nimport { DirectTransitionForm } from './DirectTransitionForm';\nimport _ from 'lodash';\nimport { FormattedMessage } from 'react-intl';\n\ntype OwnModelStageTransitionDropdownProps = {\n  currentStage?: string;\n  permissionLevel?: string;\n  onSelect?: (...args: any[]) => any;\n};\n\ntype ModelStageTransitionDropdownState = any;\n\ntype ModelStageTransitionDropdownProps = OwnModelStageTransitionDropdownProps &\n  typeof ModelStageTransitionDropdown.defaultProps;\n\nexport class ModelStageTransitionDropdown extends React.Component<\n  ModelStageTransitionDropdownProps,\n  ModelStageTransitionDropdownState\n> {\n  static defaultProps = {\n    currentStage: Stages.NONE,\n  };\n\n  state = {\n    confirmModalVisible: false,\n    confirmingActivity: null,\n    handleConfirm: undefined,\n  };\n\n  transitionFormRef = React.createRef();\n\n  handleMenuItemClick = (activity: any) => {\n    const { onSelect } = this.props;\n    this.setState({\n      confirmModalVisible: true,\n      confirmingActivity: activity,\n      handleConfirm:\n        onSelect &&\n        (() => {\n          this.setState({ confirmModalVisible: false });\n          const archiveExistingVersions = Boolean(\n            (this as any).transitionFormRef.current.getFieldValue('archiveExistingVersions'),\n          );\n          // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n          this.props.onSelect(activity, archiveExistingVersions);\n        }),\n    });\n  };\n\n  handleConfirmModalCancel = () => {\n    this.setState({ confirmModalVisible: false });\n  };\n\n  getNoneCurrentStages = (currentStage: any) => {\n    const stages = Object.values(Stages);\n    _.remove(stages, (s) => s === currentStage);\n    return stages;\n  };\n\n  getMenu() {\n    const { currentStage, onSelect } = this.props;\n    const nonCurrentStages = this.getNoneCurrentStages(currentStage);\n    return (\n      <Menu onSelect={onSelect}>\n        {nonCurrentStages.map((stage) => (\n          <Menu.Item\n            key={`transition-to-${stage}`}\n            onClick={() =>\n              this.handleMenuItemClick({\n                type: ActivityTypes.APPLIED_TRANSITION,\n                to_stage: stage,\n              })\n            }\n          >\n            <FormattedMessage\n              defaultMessage=\"Transition to\"\n              description=\"Text for transitioning a model version to a different stage under\n                 dropdown menu in model version page\"\n            />\n            &nbsp;&nbsp;&nbsp;\n            <ArrowRightIcon />\n            &nbsp;&nbsp;&nbsp;\n            {StageTagComponents[stage]}\n          </Menu.Item>\n        ))}\n      </Menu>\n    );\n  }\n\n  renderConfirmModal() {\n    const { confirmModalVisible, confirmingActivity, handleConfirm } = this.state;\n    if (confirmingActivity) {\n      const formComponent = (\n        <DirectTransitionForm\n          // @ts-expect-error TS(2322): Type '{ innerRef: RefObject<unknown>; toStage: any... Remove this comment to see the full error message\n          innerRef={this.transitionFormRef}\n          toStage={(confirmingActivity as any).to_stage}\n        />\n      );\n      return (\n        <Modal\n          title={\n            <FormattedMessage\n              defaultMessage=\"Stage Transition\"\n              description=\"Title text for model version stage transitions in confirm modal\"\n            />\n          }\n          visible={confirmModalVisible}\n          onOk={handleConfirm}\n          onCancel={this.handleConfirmModalCancel}\n          okText={\n            <FormattedMessage\n              defaultMessage=\"OK\"\n              description=\"Text for OK button on the confirmation page for stage transition\n                 on the model versions page\"\n            />\n          }\n          cancelText={\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Text for cancel button on the confirmation page for stage\n                transitions on the model versions page\"\n            />\n          }\n        >\n          {renderActivityDescription(confirmingActivity)}\n          {formComponent}\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const { currentStage } = this.props;\n    return (\n      <span>\n        <Dropdown overlay={this.getMenu()} trigger={['click']} className=\"stage-transition-dropdown\">\n          <span>\n            {StageTagComponents[currentStage]}\n            <ChevronDownIcon css={{ cursor: 'pointer', marginLeft: -4 }} />\n          </span>\n        </Dropdown>\n        {this.renderConfirmModal()}\n      </span>\n    );\n  }\n}\n\nexport const renderActivityDescription = (activity: any) => {\n  if (activity) {\n    return (\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Transition to\"\n          description=\"Text for activity description under confirmation modal for model\n             version stage transition\"\n        />\n        &nbsp;&nbsp;&nbsp;\n        <ArrowRightIcon />\n        &nbsp;&nbsp;&nbsp;\n        {StageTagComponents[activity.to_stage]}\n      </div>\n    );\n  }\n  return null;\n};\n","import { Button, PencilIcon } from '@databricks/design-system';\nimport type { ModelEntity } from '../../../experiment-tracking/types';\nimport { useEditRegisteredModelAliasesModal } from '../../hooks/useEditRegisteredModelAliasesModal';\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { useCallback } from 'react';\n\nexport const ModelVersionViewAliasEditor = ({\n  aliases = [],\n  modelEntity,\n  version,\n  onAliasesModified,\n}: {\n  modelEntity?: ModelEntity;\n  aliases?: string[];\n  version: string;\n  onAliasesModified?: () => void;\n}) => {\n  const { EditAliasesModal, showEditAliasesModal } = useEditRegisteredModelAliasesModal({\n    model: modelEntity || null,\n    onSuccess: onAliasesModified,\n  });\n  const onAddEdit = useCallback(() => {\n    showEditAliasesModal(version);\n  }, [showEditAliasesModal, version]);\n  return (\n    <>\n      {EditAliasesModal}\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionviewaliaseditor.tsx_29\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n          title=\"Add aliases\"\n        >\n          Add\n        </Button>\n      ) : (\n        <div css={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>\n          {aliases.map((alias) => (\n            <ModelVersionAliasTag compact value={alias} key={alias} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionviewaliaseditor.tsx_37\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n            title=\"Edit aliases\"\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Link, NavigateFunction } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport { PromoteModelButton } from './PromoteModelButton';\nimport { SchemaTable } from './SchemaTable';\nimport Utils from '../../common/utils/Utils';\nimport { ModelStageTransitionDropdown } from './ModelStageTransitionDropdown';\nimport { message } from 'antd';\nimport { Descriptions } from '../../common/components/Descriptions';\nimport { modelStagesMigrationGuideLink } from '../../common/constants';\nimport { Alert, Modal, Button, InfoIcon, Tooltip, Typography } from '@databricks/design-system';\nimport {\n  ModelVersionStatus,\n  StageLabels,\n  StageTagComponents,\n  ModelVersionStatusIcons,\n  DefaultModelVersionStatusMessages,\n  ACTIVE_STAGES,\n} from '../constants';\nimport Routers from '../../experiment-tracking/routes';\nimport { CollapsibleSection } from '../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../common/components/EditableNote';\nimport { EditableTagsTableView } from '../../common/components/EditableTagsTableView';\nimport { getModelVersionTags } from '../reducers';\nimport { setModelVersionTagApi, deleteModelVersionTagApi } from '../actions';\nimport { connect } from 'react-redux';\nimport { OverflowMenu, PageHeader } from '../../shared/building_blocks/PageHeader';\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport { extractArtifactPathFromModelSource } from '../utils/VersionUtils';\nimport { withNextModelsUIContext } from '../hooks/useNextModelsUI';\nimport { ModelsNextUIToggleSwitch } from './ModelsNextUIToggleSwitch';\nimport { shouldShowModelsNextUI } from '../../common/utils/FeatureUtils';\nimport { ModelVersionViewAliasEditor } from './aliases/ModelVersionViewAliasEditor';\nimport type { ModelEntity, RunInfoEntity } from '../../experiment-tracking/types';\n\ntype ModelVersionViewImplProps = {\n  modelName?: string;\n  modelVersion?: any;\n  modelEntity?: ModelEntity;\n  schema?: any;\n  activities?: Record<string, unknown>[];\n  transitionRequests?: Record<string, unknown>[];\n  onCreateComment: (...args: any[]) => any;\n  onEditComment: (...args: any[]) => any;\n  onDeleteComment: (...args: any[]) => any;\n  runInfo?: RunInfoEntity;\n  runDisplayName?: string;\n  handleStageTransitionDropdownSelect: (...args: any[]) => any;\n  deleteModelVersionApi: (...args: any[]) => any;\n  handleEditDescription: (...args: any[]) => any;\n  onAliasesModified: () => void;\n  navigate: NavigateFunction;\n  tags: any;\n  setModelVersionTagApi: (...args: any[]) => any;\n  deleteModelVersionTagApi: (...args: any[]) => any;\n  intl: IntlShape;\n  usingNextModelsUI: boolean;\n};\n\ntype ModelVersionViewImplState = any;\n\nexport class ModelVersionViewImpl extends React.Component<ModelVersionViewImplProps, ModelVersionViewImplState> {\n  state = {\n    isDeleteModalVisible: false,\n    isDeleteModalConfirmLoading: false,\n    showDescriptionEditor: false,\n    isTagsRequestPending: false,\n  };\n\n  formRef = React.createRef();\n\n  componentDidMount() {\n    const pageTitle = `${this.props.modelName} v${this.props.modelVersion.version} - MLflow Model`;\n    Utils.updatePageTitle(pageTitle);\n  }\n\n  handleDeleteConfirm = () => {\n    const { modelName = '', modelVersion, navigate } = this.props;\n    const { version } = modelVersion;\n    this.showConfirmLoading();\n    this.props\n      .deleteModelVersionApi(modelName, version)\n      .then(() => {\n        navigate(ModelRegistryRoutes.getModelPageRoute(modelName));\n      })\n      .catch((e: any) => {\n        this.hideConfirmLoading();\n        Utils.logErrorAndNotifyUser(e);\n      });\n  };\n\n  showDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  hideDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  showConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: true });\n  };\n\n  hideConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: false });\n  };\n\n  handleCancelEditDescription = () => {\n    this.setState({ showDescriptionEditor: false });\n  };\n\n  handleSubmitEditDescription = (description: any) => {\n    return this.props.handleEditDescription(description).then(() => {\n      this.setState({ showDescriptionEditor: false });\n    });\n  };\n\n  startEditingDescription = (e: any) => {\n    e.stopPropagation();\n    this.setState({ showDescriptionEditor: true });\n  };\n\n  handleAddTag = (values: any) => {\n    const form = this.formRef.current;\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    this.setState({ isTagsRequestPending: true });\n    this.props\n      .setModelVersionTagApi(modelName, version, values.name, values.value)\n      .then(() => {\n        this.setState({ isTagsRequestPending: false });\n        (form as any).resetFields();\n      })\n      .catch((ex: any) => {\n        this.setState({ isTagsRequestPending: false });\n        console.error(ex);\n        message.error(\n          this.props.intl.formatMessage(\n            {\n              defaultMessage: 'Failed to add tag. Error: {userVisibleError}',\n              description: 'Text for user visible error when adding tag in model version view',\n            },\n            {\n              userVisibleError: ex.getUserVisibleError(),\n            },\n          ),\n        );\n      });\n  };\n\n  handleSaveEdit = ({ name, value }: any) => {\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    return this.props.setModelVersionTagApi(modelName, version, name, value).catch((ex: any) => {\n      console.error(ex);\n      message.error(\n        this.props.intl.formatMessage(\n          {\n            defaultMessage: 'Failed to set tag. Error: {userVisibleError}',\n            description: 'Text for user visible error when setting tag in model version view',\n          },\n          {\n            userVisibleError: ex.getUserVisibleError(),\n          },\n        ),\n      );\n    });\n  };\n\n  handleDeleteTag = ({ name }: any) => {\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    return this.props.deleteModelVersionTagApi(modelName, version, name).catch((ex: any) => {\n      console.error(ex);\n      message.error(\n        this.props.intl.formatMessage(\n          {\n            defaultMessage: 'Failed to delete tag. Error: {userVisibleError}',\n            description: 'Text for user visible error when deleting tag in model version view',\n          },\n          {\n            userVisibleError: ex.getUserVisibleError(),\n          },\n        ),\n      );\n    });\n  };\n\n  shouldHideDeleteOption() {\n    return false;\n  }\n\n  renderStageDropdown(modelVersion: any) {\n    const { handleStageTransitionDropdownSelect } = this.props;\n    return (\n      <Descriptions.Item\n        key=\"description-key-stage\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Stage',\n          description: 'Label name for stage metadata in model version page',\n        })}\n      >\n        {modelVersion.status === ModelVersionStatus.READY ? (\n          <ModelStageTransitionDropdown\n            currentStage={modelVersion.current_stage}\n            permissionLevel={modelVersion.permission_level}\n            onSelect={handleStageTransitionDropdownSelect}\n          />\n        ) : (\n          StageTagComponents[modelVersion.current_stage]\n        )}\n      </Descriptions.Item>\n    );\n  }\n\n  renderDisabledStage(modelVersion: any) {\n    const tooltipContent = (\n      <FormattedMessage\n        defaultMessage=\"Stages have been deprecated in the new Model Registry UI. Learn how to \n      migrate models <link>here</link>.\"\n        description=\"Tooltip content for the disabled stage metadata in model version page\"\n        values={{\n          link: (chunks: any) => (\n            <Typography.Link href={modelStagesMigrationGuideLink} openInNewTab>\n              {chunks}\n            </Typography.Link>\n          ),\n        }}\n      />\n    );\n    return (\n      <Descriptions.Item\n        key=\"description-key-stage-disabled\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Stage (deprecated)',\n          description: 'Label name for the deprecated stage metadata in model version page',\n        })}\n      >\n        <div css={{ display: 'flex', alignItems: 'center' }}>\n          {StageLabels[modelVersion.current_stage]}\n          <Tooltip title={tooltipContent} placement=\"bottom\">\n            <InfoIcon css={{ paddingLeft: '4px' }} />\n          </Tooltip>\n        </div>\n      </Descriptions.Item>\n    );\n  }\n\n  renderRegisteredTimestampDescription(creation_timestamp: any) {\n    return (\n      <Descriptions.Item\n        key=\"description-key-register\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Registered At',\n          description: 'Label name for registered timestamp metadata in model version page',\n        })}\n      >\n        {Utils.formatTimestamp(creation_timestamp)}\n      </Descriptions.Item>\n    );\n  }\n\n  renderCreatorDescription(user_id: any) {\n    return (\n      user_id && (\n        <Descriptions.Item\n          key=\"description-key-creator\"\n          label={this.props.intl.formatMessage({\n            defaultMessage: 'Creator',\n            description: 'Label name for creator metadata in model version page',\n          })}\n        >\n          {user_id}\n        </Descriptions.Item>\n      )\n    );\n  }\n\n  renderLastModifiedDescription(last_updated_timestamp: any) {\n    return (\n      <Descriptions.Item\n        key=\"description-key-modified\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Last Modified',\n          description: 'Label name for last modified timestamp metadata in model version page',\n        })}\n      >\n        {Utils.formatTimestamp(last_updated_timestamp)}\n      </Descriptions.Item>\n    );\n  }\n\n  renderSourceRunDescription() {\n    return (\n      <Descriptions.Item\n        key=\"description-key-source-run\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Source Run',\n          description: 'Label name for source run metadata in model version page',\n        })}\n        // @ts-expect-error TS(2322): Type '{ children: Element | null; key: string; lab... Remove this comment to see the full error message\n        className=\"linked-run\"\n      >\n        {this.resolveRunLink()}\n      </Descriptions.Item>\n    );\n  }\n\n  renderCopiedFromLink() {\n    const { source } = this.props.modelVersion;\n    const modelUriRegex = /^models:\\/[^/]+\\/[^/]+$/;\n    if (!source || !modelUriRegex.test(source)) {\n      return null;\n    }\n    const sourceParts = source.split('/');\n    const sourceModelName = sourceParts[1];\n    const sourceModelVersion = sourceParts[2];\n    const link = (\n      <>\n        <Link\n          data-test-id=\"copied-from-link\"\n          to={ModelRegistryRoutes.getModelVersionPageRoute(sourceModelName, sourceModelVersion)}\n        >\n          {sourceModelName}\n        </Link>\n        &nbsp;\n        <FormattedMessage\n          defaultMessage=\"(Version {sourceModelVersion})\"\n          description=\"Version number of the source model version\"\n          values={{ sourceModelVersion }}\n        />\n      </>\n    );\n    return (\n      <Descriptions.Item\n        key=\"description-key-copied-from\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Copied from',\n          description: 'Label name for source model version metadata in model version page',\n        })}\n      >\n        {link}\n      </Descriptions.Item>\n    );\n  }\n\n  renderAliasEditor = () => {\n    // Extract aliases for the currently displayed model version from the model entity object\n    const currentVersion = this.props.modelVersion.version;\n    const currentVersionAliases =\n      this.props.modelEntity?.aliases?.filter(({ version }) => version === currentVersion).map(({ alias }) => alias) ||\n      [];\n    return (\n      <Descriptions.Item\n        key=\"description-key-aliases\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Aliases',\n          description: 'Aliases section in the metadata on model version page',\n        })}\n      >\n        <ModelVersionViewAliasEditor\n          aliases={currentVersionAliases}\n          version={this.props.modelVersion.version}\n          modelEntity={this.props.modelEntity}\n          onAliasesModified={this.props.onAliasesModified}\n        />\n      </Descriptions.Item>\n    );\n  };\n\n  getDescriptions(modelVersion: any) {\n    const { usingNextModelsUI } = this.props;\n\n    const defaultOrder = [\n      this.renderRegisteredTimestampDescription(modelVersion.creation_timestamp),\n      this.renderCreatorDescription(modelVersion.user_id),\n      this.renderLastModifiedDescription(modelVersion.last_updated_timestamp),\n      this.renderSourceRunDescription(),\n      this.renderCopiedFromLink(),\n      usingNextModelsUI ? this.renderAliasEditor() : this.renderStageDropdown(modelVersion),\n      usingNextModelsUI ? this.renderDisabledStage(modelVersion) : null,\n    ];\n    return defaultOrder.filter((item) => item !== null);\n  }\n\n  renderMetadata(modelVersion: any) {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: any[]; className: string; }' is ... Remove this comment to see the full error message\n      <Descriptions className=\"metadata-list\">{this.getDescriptions(modelVersion)}</Descriptions>\n    );\n  }\n\n  renderStatusAlert() {\n    const { status, status_message } = this.props.modelVersion;\n    if (status !== ModelVersionStatus.READY) {\n      const defaultMessage = DefaultModelVersionStatusMessages[status];\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - OSS specific ignore\n      const type = status === ModelVersionStatus.FAILED_REGISTRATION ? 'error' : 'info';\n      return (\n        <Alert\n          type={type}\n          className={`status-alert status-alert-${type}`}\n          message={status_message || defaultMessage}\n          // @ts-expect-error TS(2322): Type '{ type: \"error\" | \"info\"; className: string;... Remove this comment to see the full error message\n          icon={ModelVersionStatusIcons[status]}\n          banner\n        />\n      );\n    }\n    return null;\n  }\n\n  renderDescriptionEditIcon() {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_modelversionview.tsx_516\"\n        data-test-id=\"descriptionEditButton\"\n        type=\"link\"\n        onClick={this.startEditingDescription}\n      >\n        <FormattedMessage\n          defaultMessage=\"Edit\"\n          description=\"Text for the edit button next to the description section title on\n             the model version view page\"\n        />{' '}\n      </Button>\n    );\n  }\n\n  resolveRunLink() {\n    const { modelVersion, runInfo } = this.props;\n    if (modelVersion.run_link) {\n      return (\n        // Reported during ESLint upgrade\n        // eslint-disable-next-line react/jsx-no-target-blank\n        <a target=\"_blank\" href={modelVersion.run_link}>\n          {this.resolveRunName()}\n        </a>\n      );\n    } else if (runInfo) {\n      let artifactPath = null;\n      const modelSource = this.props.modelVersion?.source;\n      if (modelSource) {\n        artifactPath = extractArtifactPathFromModelSource(modelSource, runInfo.runUuid);\n      }\n      return (\n        <Link to={Routers.getRunPageRoute(runInfo.experimentId, runInfo.runUuid, artifactPath)}>\n          {this.resolveRunName()}\n        </Link>\n      );\n    }\n    return null;\n  }\n\n  resolveRunName() {\n    const { modelVersion, runInfo, runDisplayName } = this.props;\n    if (modelVersion.run_link) {\n      // We use the first 37 chars to stay consistent with runDisplayName, which is typically:\n      // Run: [ID]\n      return modelVersion.run_link.substr(0, 37) + '...';\n    } else if (runInfo) {\n      return runDisplayName || runInfo.runUuid;\n    } else {\n      return null;\n    }\n  }\n\n  renderPomoteModelButton() {\n    const { modelVersion, usingNextModelsUI, navigate } = this.props;\n    return usingNextModelsUI ? <PromoteModelButton modelVersion={modelVersion} /> : null;\n  }\n\n  getPageHeader(title: any, breadcrumbs: any) {\n    const menu = [\n      {\n        id: 'delete',\n        itemName: (\n          <FormattedMessage\n            defaultMessage=\"Delete\"\n            description=\"Text for delete button on model version view page header\"\n          />\n        ),\n        onClick: this.showDeleteModal,\n        disabled: ACTIVE_STAGES.includes(this.props.modelVersion.current_stage),\n      },\n    ];\n    return (\n      <PageHeader title={title} breadcrumbs={breadcrumbs}>\n        {!this.shouldHideDeleteOption() && <OverflowMenu menu={menu} />}\n        {this.renderPomoteModelButton()}\n      </PageHeader>\n    );\n  }\n\n  render() {\n    const { modelName = '', modelVersion, tags, schema } = this.props;\n    const { description } = modelVersion;\n    const { isDeleteModalVisible, isDeleteModalConfirmLoading, showDescriptionEditor, isTagsRequestPending } =\n      this.state;\n    const title = (\n      <FormattedMessage\n        defaultMessage=\"Version {versionNum}\"\n        description=\"Title text for model version page\"\n        values={{ versionNum: modelVersion.version }}\n      />\n    );\n    const breadcrumbs = [\n      <Link to={ModelRegistryRoutes.modelListPageRoute}>\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for link back to models page under the header on the model version\n             view page\"\n        />\n      </Link>,\n      <Link data-test-id=\"breadcrumbRegisteredModel\" to={ModelRegistryRoutes.getModelPageRoute(modelName)}>\n        {modelName}\n      </Link>,\n    ];\n    return (\n      <div>\n        {this.getPageHeader(title, breadcrumbs)}\n        {this.renderStatusAlert()}\n\n        {/* Metadata List */}\n        {this.renderMetadata(modelVersion)}\n\n        {/* New models UI switch */}\n        {shouldShowModelsNextUI() && (\n          <div css={{ marginTop: 8, display: 'flex', justifyContent: 'flex-end' }}>\n            <ModelsNextUIToggleSwitch />\n          </div>\n        )}\n\n        {/* Page Sections */}\n        <CollapsibleSection\n          title={\n            <span>\n              <FormattedMessage\n                defaultMessage=\"Description\"\n                description=\"Title text for the description section on the model version view page\"\n              />{' '}\n              {!showDescriptionEditor ? this.renderDescriptionEditIcon() : null}\n            </span>\n          }\n          forceOpen={showDescriptionEditor}\n          defaultCollapsed={!description}\n          data-test-id=\"model-version-description-section\"\n        >\n          <EditableNote\n            defaultMarkdown={description}\n            onSubmit={this.handleSubmitEditDescription}\n            onCancel={this.handleCancelEditDescription}\n            showEditor={showDescriptionEditor}\n          />\n        </CollapsibleSection>\n        <div data-test-id=\"tags-section\">\n          <CollapsibleSection\n            title={\n              <FormattedMessage\n                defaultMessage=\"Tags\"\n                description=\"Title text for the tags section on the model versions view page\"\n              />\n            }\n            defaultCollapsed={Utils.getVisibleTagValues(tags).length === 0}\n            data-test-id=\"model-version-tags-section\"\n          >\n            <EditableTagsTableView\n              // @ts-expect-error TS(2322): Type '{ innerRef: RefObject<unknown>; handleAddTag... Remove this comment to see the full error message\n              innerRef={this.formRef}\n              handleAddTag={this.handleAddTag}\n              handleDeleteTag={this.handleDeleteTag}\n              handleSaveEdit={this.handleSaveEdit}\n              tags={tags}\n              isRequestPending={isTagsRequestPending}\n            />\n          </CollapsibleSection>\n        </div>\n        <CollapsibleSection\n          title={\n            <FormattedMessage\n              defaultMessage=\"Schema\"\n              description=\"Title text for the schema section on the model versions view page\"\n            />\n          }\n          data-test-id=\"model-version-schema-section\"\n        >\n          <SchemaTable schema={schema} />\n        </CollapsibleSection>\n        <Modal\n          title={this.props.intl.formatMessage({\n            defaultMessage: 'Delete Model Version',\n            description: 'Title text for model version deletion modal in model versions view page',\n          })}\n          visible={isDeleteModalVisible}\n          confirmLoading={isDeleteModalConfirmLoading}\n          onOk={this.handleDeleteConfirm}\n          okText={this.props.intl.formatMessage({\n            defaultMessage: 'Delete',\n            description: 'OK button text for model version deletion modal in model versions view page',\n          })}\n          // @ts-expect-error TS(2322): Type '{ children: Element; title: any; visible: bo... Remove this comment to see the full error message\n          okType=\"danger\"\n          onCancel={this.hideDeleteModal}\n          cancelText={this.props.intl.formatMessage({\n            defaultMessage: 'Cancel',\n            description: 'Cancel button text for model version deletion modal in model versions view page',\n          })}\n        >\n          <span>\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete model version {versionNum}? This\n                 cannot be undone.\"\n              description=\"Comment text for model version deletion modal in model versions view\n                 page\"\n              values={{ versionNum: modelVersion.version }}\n            />\n          </span>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { modelName } = ownProps;\n  const { version } = ownProps.modelVersion;\n  const tags = getModelVersionTags(modelName, version, state);\n  return { tags };\n};\nconst mapDispatchToProps = { setModelVersionTagApi, deleteModelVersionTagApi };\n\nexport const ModelVersionView = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withNextModelsUIContext(injectIntl<'intl', ModelVersionViewImplProps>(ModelVersionViewImpl)));\n","/**\n * Extract artifact path from provided `modelSource` string\n */\nexport function extractArtifactPathFromModelSource(modelSource: string, runId: string) {\n  return modelSource.match(new RegExp(`/${runId}/artifacts/(.+)`))?.[1];\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  getModelVersionApi,\n  getRegisteredModelApi,\n  updateModelVersionApi,\n  deleteModelVersionApi,\n  transitionModelVersionStageApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n} from '../actions';\nimport { getRunApi } from '../../experiment-tracking/actions';\nimport { getModelVersion, getModelVersionSchemas } from '../reducers';\nimport { ModelVersionView } from './ModelVersionView';\nimport { ActivityTypes, MODEL_VERSION_STATUS_POLL_INTERVAL as POLL_INTERVAL } from '../constants';\nimport Utils from '../../common/utils/Utils';\nimport { getRunInfo, getRunTags } from '../../experiment-tracking/reducers/Reducers';\nimport RequestStateWrapper, { triggerError } from '../../common/components/RequestStateWrapper';\nimport { ErrorView } from '../../common/components/ErrorView';\nimport { Spinner } from '../../common/components/Spinner';\nimport { ModelRegistryRoutes } from '../routes';\nimport { getProtoField } from '../utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport _ from 'lodash';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport type { ModelEntity, RunInfoEntity } from '../../experiment-tracking/types';\nimport { ReduxState } from '../../redux-types';\nimport { ErrorCodes } from '../../common/constants';\nimport { injectIntl } from 'react-intl';\n\ntype ModelVersionPageImplProps = WithRouterNextProps & {\n  modelName: string;\n  version: string;\n  modelVersion?: any;\n  runInfo?: any;\n  runDisplayName?: string;\n  modelEntity?: ModelEntity;\n  getModelVersionApi: (...args: any[]) => any;\n  getRegisteredModelApi: typeof getRegisteredModelApi;\n  updateModelVersionApi: (...args: any[]) => any;\n  transitionModelVersionStageApi: (...args: any[]) => any;\n  deleteModelVersionApi: (...args: any[]) => any;\n  getRunApi: (...args: any[]) => any;\n  apis: any;\n  getModelVersionArtifactApi: (...args: any[]) => any;\n  parseMlModelFile: (...args: any[]) => any;\n  schema?: any;\n  activities?: Record<string, unknown>[];\n  intl?: any;\n};\n\ntype ModelVersionPageImplState = any;\n\nexport class ModelVersionPageImpl extends React.Component<ModelVersionPageImplProps, ModelVersionPageImplState> {\n  listTransitionRequestId: any;\n  pollIntervalId: any;\n\n  initGetModelVersionDetailsRequestId = getUUID();\n  getRunRequestId = getUUID();\n  updateModelVersionRequestId = getUUID();\n  transitionModelVersionStageRequestId = getUUID();\n  getModelVersionDetailsRequestId = getUUID();\n  initGetMlModelFileRequestId = getUUID();\n  state = {\n    criticalInitialRequestIds: [this.initGetModelVersionDetailsRequestId, this.initGetMlModelFileRequestId],\n  };\n\n  pollingRelatedRequestIds = [this.getModelVersionDetailsRequestId, this.getRunRequestId];\n\n  hasPendingPollingRequest = () =>\n    this.pollingRelatedRequestIds.every((requestId) => {\n      const request = this.props.apis[requestId];\n      return Boolean(request && request.active);\n    });\n\n  loadData = (isInitialLoading: any) => {\n    const promises = [this.getModelVersionDetailAndRunInfo(isInitialLoading)];\n    return Promise.all([promises]);\n  };\n\n  pollData = () => {\n    const { modelName, version, navigate } = this.props;\n    if (!this.hasPendingPollingRequest() && Utils.isBrowserTabVisible()) {\n      // @ts-expect-error TS(2554): Expected 1 arguments, but got 0.\n      return this.loadData().catch((e) => {\n        if (e.getErrorCode() === 'RESOURCE_DOES_NOT_EXIST') {\n          Utils.logErrorAndNotifyUser(e);\n          this.props.deleteModelVersionApi(modelName, version, undefined, true);\n          navigate(ModelRegistryRoutes.getModelPageRoute(modelName));\n        } else {\n          console.error(e);\n        }\n      });\n    }\n    return Promise.resolve();\n  };\n\n  // We need to do this because currently the ModelVersionDetailed we got does not contain\n  // experimentId. We need experimentId to construct a link to the source run. This workaround can\n  // be removed after the availability of experimentId.\n  getModelVersionDetailAndRunInfo(isInitialLoading: any) {\n    const { modelName, version } = this.props;\n    return this.props\n      .getModelVersionApi(\n        modelName,\n        version,\n        isInitialLoading === true ? this.initGetModelVersionDetailsRequestId : this.getModelVersionDetailsRequestId,\n      )\n      .then(({ value }: any) => {\n        if (value && !value[getProtoField('model_version')].run_link) {\n          this.props.getRunApi(value[getProtoField('model_version')].run_id, this.getRunRequestId);\n        }\n      });\n  }\n  // We need this for getting mlModel artifact file,\n  // this will be replaced with a single backend call in the future when supported\n  getModelVersionMlModelFile() {\n    const { modelName, version } = this.props;\n    this.props\n      .getModelVersionArtifactApi(modelName, version)\n      .then((content: any) =>\n        this.props.parseMlModelFile(modelName, version, content.value, this.initGetMlModelFileRequestId),\n      )\n      .catch(() => {\n        // Failure of this call chain should not block the page. Here we remove\n        // `initGetMlModelFileRequestId` from `criticalInitialRequestIds`\n        // to unblock RequestStateWrapper from rendering its content\n        this.setState((prevState: any) => ({\n          criticalInitialRequestIds: _.without(prevState.criticalInitialRequestIds, this.initGetMlModelFileRequestId),\n        }));\n      });\n  }\n\n  handleStageTransitionDropdownSelect = (activity: any, archiveExistingVersions: any) => {\n    const { modelName, version } = this.props;\n    const toStage = activity.to_stage;\n    if (activity.type === ActivityTypes.APPLIED_TRANSITION) {\n      this.props\n        .transitionModelVersionStageApi(\n          modelName,\n          version.toString(),\n          toStage,\n          archiveExistingVersions,\n          this.transitionModelVersionStageRequestId,\n        )\n        .then(this.loadData)\n        .catch(Utils.logErrorAndNotifyUser);\n    }\n  };\n\n  handleEditDescription = (description: any) => {\n    const { modelName, version } = this.props;\n    return this.props\n      .updateModelVersionApi(modelName, version, description, this.updateModelVersionRequestId)\n      .then(this.loadData)\n      .catch(console.error);\n  };\n\n  componentDidMount() {\n    this.loadData(true).catch(console.error);\n    this.loadModelDataWithAliases();\n    this.pollIntervalId = setInterval(this.pollData, POLL_INTERVAL);\n    this.getModelVersionMlModelFile();\n  }\n\n  loadModelDataWithAliases = () => {\n    this.props.getRegisteredModelApi(this.props.modelName);\n  };\n\n  // Make a new initial load if model version or name has changed\n  componentDidUpdate(prevProps: ModelVersionPageImplProps) {\n    if (this.props.version !== prevProps.version || this.props.modelName !== prevProps.modelName) {\n      this.loadData(true).catch(console.error);\n      this.getModelVersionMlModelFile();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.pollIntervalId);\n  }\n\n  render() {\n    const { modelName, version, modelVersion, runInfo, runDisplayName, navigate, schema, modelEntity } = this.props;\n\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.state.criticalInitialRequestIds}\n          // eslint-disable-next-line no-trailing-spaces\n        >\n          {(loading: any, hasError: any, requests: any) => {\n            if (hasError) {\n              clearInterval(this.pollIntervalId);\n              const resourceConflictError = Utils.getResourceConflictError(\n                requests,\n                this.state.criticalInitialRequestIds,\n              );\n              if (resourceConflictError) {\n                return (\n                  <ErrorView\n                    statusCode={409}\n                    subMessage={resourceConflictError.error.getMessageField()}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              if (Utils.shouldRender404(requests, this.state.criticalInitialRequestIds)) {\n                return (\n                  <ErrorView\n                    statusCode={404}\n                    subMessage={`Model ${modelName} v${version} does not exist`}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              // TODO(Zangr) Have a more generic boundary to handle all errors, not just 404.\n              const permissionDeniedErrors = requests.filter((request: any) => {\n                return (\n                  this.state.criticalInitialRequestIds.includes(request.id) &&\n                  request.error?.getErrorCode() === ErrorCodes.PERMISSION_DENIED\n                );\n              });\n              if (permissionDeniedErrors && permissionDeniedErrors[0]) {\n                return (\n                  <ErrorView\n                    statusCode={403}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Permission denied for {modelName} version {version}. Error: \"{errorMsg}\"',\n                        description: 'Permission denied error message on model version detail page',\n                      },\n                      {\n                        modelName: modelName,\n                        version: version,\n                        errorMsg: permissionDeniedErrors[0].error?.getMessageField(),\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              triggerError(requests);\n            } else if (loading) {\n              return <Spinner />;\n            } else if (modelVersion) {\n              // Null check to prevent NPE after delete operation\n              return (\n                <ModelVersionView\n                  modelName={modelName}\n                  modelVersion={modelVersion}\n                  modelEntity={modelEntity}\n                  runInfo={runInfo}\n                  runDisplayName={runDisplayName}\n                  handleEditDescription={this.handleEditDescription}\n                  deleteModelVersionApi={this.props.deleteModelVersionApi}\n                  navigate={navigate}\n                  handleStageTransitionDropdownSelect={this.handleStageTransitionDropdownSelect}\n                  schema={schema}\n                  onAliasesModified={this.loadModelDataWithAliases}\n                />\n              );\n            }\n            return null;\n          }}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: WithRouterNextProps<{ modelName: string; version: string }>) => {\n  const modelName = decodeURIComponent(ownProps.params.modelName);\n  const { version } = ownProps.params;\n  const modelVersion = getModelVersion(state, modelName, version);\n  const schema = getModelVersionSchemas(state, modelName, version);\n  let runInfo: RunInfoEntity | null = null;\n  if (modelVersion && !modelVersion.run_link) {\n    runInfo = getRunInfo(modelVersion && modelVersion.run_id, state);\n  }\n  const tags = runInfo && getRunTags(runInfo.runUuid, state);\n  const runDisplayName = tags && runInfo && Utils.getRunDisplayName(runInfo, runInfo.runUuid);\n  const modelEntity = state.entities.modelByName[modelName];\n  const { apis } = state;\n  return {\n    modelName,\n    version,\n    modelVersion,\n    schema,\n    runInfo,\n    runDisplayName,\n    apis,\n    modelEntity,\n  };\n};\n\nconst mapDispatchToProps = {\n  getModelVersionApi,\n  getRegisteredModelApi,\n  updateModelVersionApi,\n  transitionModelVersionStageApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n  deleteModelVersionApi,\n  getRunApi,\n};\n\nconst ModelVersionPageWithRouter = withRouterNext(\n  // @ts-expect-error TS(2769): No overload matches this call.\n  connect(mapStateToProps, mapDispatchToProps)(injectIntl(ModelVersionPageImpl)),\n);\n\nexport const ModelVersionPage = withErrorBoundary(ErrorUtils.mlflowServices.MODEL_REGISTRY, ModelVersionPageWithRouter);\n\nexport default ModelVersionPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Form, Input, LegacySelect } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport './RegisterModelForm.css';\n\nconst { Option, OptGroup } = LegacySelect;\n\nconst CREATE_NEW_MODEL_LABEL = 'Create New Model';\n// Include 'CREATE_NEW_MODEL_LABEL' as part of the value for filtering to work properly. Also added\n// prefix and postfix to avoid value conflict with actual model names.\nexport const CREATE_NEW_MODEL_OPTION_VALUE = `$$$__${CREATE_NEW_MODEL_LABEL}__$$$`;\nexport const SELECTED_MODEL_FIELD = 'selectedModel';\nexport const MODEL_NAME_FIELD = 'modelName';\nexport const DESCRIPTION_FIELD = 'description';\n\ntype Props = {\n  modelByName?: any;\n  isCopy?: boolean;\n  onSearchRegisteredModels: (...args: any[]) => any;\n  innerRef: any;\n};\n\ntype State = any;\n\nexport class RegisterModelForm extends React.Component<Props, State> {\n  state = {\n    selectedModel: null,\n  };\n\n  handleModelSelectChange = (selectedModel: any) => {\n    this.setState({ selectedModel });\n  };\n\n  modelNameValidator = (rule: any, value: any, callback: any) => {\n    const { modelByName } = this.props;\n    callback(modelByName[value] ? `Model \"${value}\" already exists.` : undefined);\n  };\n\n  handleFilterOption = (input: any, option: any) => {\n    const value = (option && option.value) || '';\n    return value.toLowerCase().indexOf(input.toLowerCase()) !== -1;\n  };\n\n  renderExplanatoryText() {\n    const { isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n\n    if (!selectedModel || creatingNewModel) {\n      return null;\n    }\n\n    const explanation = isCopy ? (\n      <FormattedMessage\n        defaultMessage=\"The model version will be copied to {selectedModel} as a new version.\"\n        description=\"Model registry > OSS Promote model modal > copy explanatory text\"\n        values={{ selectedModel: selectedModel }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage=\"The model will be registered as a new version of {selectedModel}.\"\n        description=\"Explantory text for registering a model\"\n        values={{ selectedModel: selectedModel }}\n      />\n    );\n\n    return <p className=\"modal-explanatory-text\">{explanation}</p>;\n  }\n\n  renderModel(model: any) {\n    return (\n      <Option value={model.name} key={model.name}>\n        {model.name}\n      </Option>\n    );\n  }\n  render() {\n    const { modelByName, innerRef, isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: (Element | null)[]; ref: any; la... Remove this comment to see the full error message\n      <Form ref={innerRef} layout=\"vertical\" className=\"register-model-form\">\n        {/* \"+ Create new model\" OR \"Select existing model\" */}\n        <Form.Item\n          label={isCopy ? <b>Copy to model</b> : 'Model'}\n          name={SELECTED_MODEL_FIELD}\n          rules={[{ required: true, message: 'Please select a model or create a new one.' }]}\n        >\n          <LegacySelect\n            dropdownClassName=\"model-select-dropdown\"\n            onChange={this.handleModelSelectChange}\n            placeholder=\"Select a model\"\n            filterOption={this.handleFilterOption}\n            onSearch={this.props.onSearchRegisteredModels}\n            // @ts-expect-error TS(2769): No overload matches this call.\n            showSearch\n          >\n            <Option value={CREATE_NEW_MODEL_OPTION_VALUE} className=\"create-new-model-option\">\n              <i className=\"fa fa-plus fa-fw\" style={{ fontSize: 13 }} /> {CREATE_NEW_MODEL_LABEL}\n            </Option>\n            <OptGroup label=\"Models\">{Object.values(modelByName).map((model) => this.renderModel(model))}</OptGroup>\n          </LegacySelect>\n        </Form.Item>\n\n        {/* Name the new model when \"+ Create new model\" is selected */}\n        {creatingNewModel ? (\n          <Form.Item\n            label=\"Model Name\"\n            name={MODEL_NAME_FIELD}\n            rules={[\n              { required: true, message: 'Please input a name for the new model.' },\n              { validator: this.modelNameValidator },\n            ]}\n          >\n            <Input placeholder=\"Input a model name\" />\n          </Form.Item>\n        ) : null}\n\n        {/* Explanatory text shown when existing model is selected */}\n        {this.renderExplanatoryText()}\n      </Form>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { Table } from 'antd';\nimport { LogModelWithSignatureUrl } from '../../common/constants';\nimport { spacingMedium } from '../../common/styles/spacing';\nimport { ColumnSpec, TensorSpec, ColumnType } from '../types/model-schema';\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport { Interpolation, Theme } from '@emotion/react';\nimport {\n  DesignSystemHocProps,\n  MinusBoxIcon,\n  PlusSquareIcon,\n  WithDesignSystemThemeHoc,\n} from '@databricks/design-system';\n\nconst { Column } = Table;\nconst { Text } = Typography;\nconst INDENTATION_SPACES = 2;\n\ntype Props = DesignSystemHocProps & {\n  schema?: any;\n  defaultExpandAllRows?: boolean;\n  intl: IntlShape;\n};\n\nfunction getTensorTypeRepr(tensorType: TensorSpec): string {\n  return `Tensor (dtype: ${tensorType['tensor-spec'].dtype}, shape: [${tensorType['tensor-spec'].shape}])`;\n}\n\n// return a formatted string representation of the column type\nfunction getColumnTypeRepr(columnType: ColumnType, indentationLevel: number): string {\n  const { type } = columnType;\n\n  const indentation = ' '.repeat(indentationLevel * INDENTATION_SPACES);\n  if (type === 'object') {\n    const propertyReprs = Object.keys(columnType.properties).map((propertyName) => {\n      const property = columnType.properties[propertyName];\n      const requiredRepr = property.required ? '' : ' (optional)';\n      const propertyRepr = getColumnTypeRepr(property, indentationLevel + 1);\n      const indentOffset = (indentationLevel + 1) * INDENTATION_SPACES;\n\n      return `${' '.repeat(indentOffset)}${propertyName}: ${propertyRepr.slice(indentOffset) + requiredRepr}`;\n    });\n\n    return `${indentation}{\\n${propertyReprs.join(',\\n')}\\n${indentation}}`;\n  }\n\n  if (type === 'array') {\n    const indentOffset = indentationLevel * INDENTATION_SPACES;\n    const itemsTypeRepr = getColumnTypeRepr(columnType.items, indentationLevel).slice(indentOffset);\n    return `${indentation}Array(${itemsTypeRepr})`;\n  }\n\n  return `${indentation}${type}`;\n}\n\nfunction formatColumnName(spec: ColumnSpec | TensorSpec): React.ReactElement {\n  let required = true;\n  if (spec.required !== undefined) {\n    ({ required } = spec);\n  } else if (spec.optional !== undefined && spec.optional) {\n    required = false;\n  }\n  const requiredTag = required ? <Text bold>(required)</Text> : <Text color=\"secondary\">(optional)</Text>;\n\n  const name = 'name' in spec ? spec.name : '-';\n\n  return (\n    <Text>\n      {name} {requiredTag}\n    </Text>\n  );\n}\n\nfunction formatColumnSchema(spec: ColumnSpec | TensorSpec): React.ReactElement {\n  const repr = spec.type === 'tensor' ? getTensorTypeRepr(spec) : getColumnTypeRepr(spec, 0);\n\n  return <pre css={signatureCodeBlock}>{repr}</pre>;\n}\n\nexport class SchemaTableImpl extends React.PureComponent<Props> {\n  renderSchemaTable = (schemaData: any, schemaType: any) => {\n    const columns = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        width: '40%',\n      },\n      {\n        title: 'Type',\n        dataIndex: 'type',\n        key: 'type',\n        width: '60%',\n      },\n    ];\n\n    return (\n      <Table\n        className=\"inner-table\"\n        size=\"middle\"\n        showHeader={false}\n        pagination={false}\n        locale={{ emptyText: `No schema ${schemaType}.` }}\n        dataSource={this.getSchemaRowData(schemaData)}\n        columns={columns}\n        scroll={{ y: 240 }}\n      />\n    );\n  };\n\n  getSchemaRowData = (schemaData: any) => {\n    const rowData: any = [];\n    schemaData.forEach((row: any, index: any) => {\n      rowData[index] = {\n        key: index,\n        name: formatColumnName(row),\n        type: formatColumnSchema(row),\n      };\n    });\n    return rowData;\n  };\n\n  renderSectionHeader = (text: any) => {\n    return <strong className=\"primary-text\">{text}</strong>;\n  };\n\n  render() {\n    const { schema } = this.props;\n    const hasSchema = schema.inputs.length || schema.outputs.length;\n    const sectionHeaders = hasSchema\n      ? [\n          {\n            key: '1',\n            name: this.props.intl.formatMessage(\n              {\n                defaultMessage: 'Inputs ({numInputs})',\n                description: 'Input section header for schema table in model version page',\n              },\n              {\n                numInputs: schema.inputs.length,\n              },\n            ),\n            type: '',\n            table: this.renderSchemaTable(schema.inputs, 'inputs'),\n          },\n          {\n            key: '2',\n            name: this.props.intl.formatMessage(\n              {\n                defaultMessage: 'Outputs ({numOutputs})',\n                description: 'Input section header for schema table in model version page',\n              },\n              {\n                numOutputs: schema.outputs.length,\n              },\n            ),\n            type: '',\n            table: this.renderSchemaTable(schema.outputs, 'outputs'),\n          },\n        ]\n      : [];\n\n    const { theme } = this.props.designSystemThemeApi;\n\n    return (\n      // @ts-expect-error TS(2322): Type '{ [x: string]: { padding: string; width: str... Remove this comment to see the full error message\n      <div css={getSchemaTableStyles(theme)}>\n        <Table\n          key=\"schema-table\"\n          className=\"outer-table\"\n          rowClassName=\"section-header-row\"\n          size=\"middle\"\n          pagination={false}\n          defaultExpandAllRows={this.props.defaultExpandAllRows}\n          expandRowByClick\n          expandedRowRender={(record) => record.table}\n          expandIcon={({ expanded, onExpand, record }) =>\n            expanded ? (\n              <span onClick={(e) => onExpand(record, e)}>\n                <MinusBoxIcon />\n              </span>\n            ) : (\n              <span onClick={(e) => onExpand(record, e)}>\n                <PlusSquareIcon />\n              </span>\n            )\n          }\n          locale={{\n            emptyText: (\n              <div>\n                {/* eslint-disable-next-line max-len */}\n                <FormattedMessage\n                  defaultMessage=\"No schema. See <link>MLflow docs</link> for how to include\n                     input and output schema with your model.\"\n                  description=\"Text for schema table when no schema exists in the model version\n                     page\"\n                  values={{\n                    link: (chunks: any) => (\n                      <a href={LogModelWithSignatureUrl} target=\"_blank\" rel=\"noreferrer\">\n                        {chunks}\n                      </a>\n                    ),\n                  }}\n                />\n              </div>\n            ),\n          }}\n          dataSource={sectionHeaders}\n          scroll={{ x: 240 }}\n        >\n          <Column\n            key={1}\n            title={this.props.intl.formatMessage({\n              defaultMessage: 'Name',\n              description: 'Text for name column in schema table in model version page',\n            })}\n            width=\"40%\"\n            dataIndex=\"name\"\n            render={this.renderSectionHeader}\n          />\n          <Column\n            key={2}\n            title={this.props.intl.formatMessage({\n              defaultMessage: 'Type',\n              description: 'Text for type column in schema table in model version page',\n            })}\n            width=\"60%\"\n            dataIndex=\"type\"\n            render={this.renderSectionHeader}\n          />\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport const SchemaTable = injectIntl(WithDesignSystemThemeHoc(SchemaTableImpl));\n\nconst antTable = '.ant-table-middle>.ant-table-content>.ant-table-scroll>.ant-table-body>table';\nconst getSchemaTableStyles = (theme: Theme) => ({\n  [`${antTable}>.ant-table-thead>tr>th.ant-table-expand-icon-th`]: {\n    padding: `${spacingMedium}px 0`,\n    width: '32px',\n  },\n  [`${antTable}>.ant-table-thead>tr>th.ant-table-row-cell-break-word`]: {\n    padding: `${spacingMedium}px 0`,\n  },\n  [`${antTable}>.ant-table-tbody>tr>td.ant-table-row-cell-break-word`]: {\n    padding: `${spacingMedium}px 0`,\n  },\n  [`${antTable}>.ant-table-tbody>tr.section-header-row>td.ant-table-row-cell-break-word`]: {\n    padding: '0',\n    width: '32px',\n  },\n  [`${antTable}>.ant-table-tbody>tr.section-header-row>td.ant-table-row-expand-icon-cell`]: {\n    padding: '0',\n  },\n  '.outer-table .ant-table-body': {\n    // !important to override inline style of overflowX: scroll\n    overflowX: 'auto !important',\n    overflowY: 'hidden',\n  },\n  '.inner-table .ant-table-body': {\n    // !important to override inline style of overflowY: scroll\n    overflowY: 'auto !important',\n  },\n  '.inner-table': {\n    maxWidth: 800,\n  },\n  '.outer-table': {\n    maxWidth: 800,\n  },\n  '.section-header-row': {\n    lineHeight: '32px',\n    cursor: 'pointer',\n  },\n  '.ant-table-tbody>tr>td': {\n    borderColor: theme.colors.borderDecorative,\n  },\n  '.ant-table-thead>tr>th': {\n    backgroundColor: theme.colors.backgroundSecondary,\n    color: theme.colors.textPrimary,\n    borderColor: theme.colors.borderDecorative,\n  },\n  '.ant-table-tbody>tr.ant-table-row:hover td': {\n    backgroundColor: theme.colors.backgroundSecondary,\n  },\n  '.ant-table-cell': {\n    backgroundColor: theme.colors.backgroundPrimary,\n    color: theme.colors.textPrimary,\n  },\n});\nconst signatureCodeBlock = (theme: Theme): Interpolation<Theme> => ({\n  whiteSpace: 'pre-wrap',\n  padding: theme.spacing.sm,\n  marginTop: theme.spacing.sm,\n  marginBottom: theme.spacing.sm,\n});\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { REGISTERED_MODELS_SEARCH_NAME_FIELD } from '../constants';\nimport { resolveFilterValue } from '../actions';\n\nexport function getModelNameFilter(query: any) {\n  if (query) {\n    return `${REGISTERED_MODELS_SEARCH_NAME_FIELD} ilike ${resolveFilterValue(query, true)}`;\n  } else {\n    return '';\n  }\n}\n\nexport function getCombinedSearchFilter({\n  query = '',\n}: {\n  query?: string;\n} = {}) {\n  const filters = [];\n  const initialFilter = query.includes('tags.') ? query : getModelNameFilter(query);\n  if (initialFilter) filters.push(initialFilter);\n  return filters.join(' AND ');\n}\n\nexport function constructSearchInputFromURLState(urlState: any) {\n  if ('searchInput' in urlState) {\n    return urlState['searchInput'];\n  }\n  if ('nameSearchInput' in urlState && 'tagSearchInput' in urlState) {\n    return getModelNameFilter(urlState['nameSearchInput']) + ` AND ` + urlState['tagSearchInput'];\n  }\n  if ('tagSearchInput' in urlState) {\n    return urlState['tagSearchInput'];\n  }\n  if ('nameSearchInput' in urlState) {\n    return urlState['nameSearchInput'];\n  }\n  return '';\n}\n"],"names":["_ref","name","styles","PromoteModelButton","props","intl","useIntl","navigate","useNavigate","createRegisteredModelRequestId","useRef","getUUID","createModelVersionRequestId","modelVersion","visible","setVisible","useState","confirmLoading","setConfirmLoading","dispatch","useDispatch","modelByName","useSelector","state","entities","form","resetAndClearModalForm","handleRegistrationFailure","e","Utils","logErrorAndNotifyUser","handleSearchRegisteredModels","useCallback","input","searchRegisteredModelsApi","getModelNameFilter","debouncedHandleSearchRegisteredModels","useMemo","debounce","useEffect","_jsxs","className","children","_jsx","Button","componentId","type","onClick","showRegisterModal","FormattedMessage","id","defaultMessage","Modal","title","values","sourceModelName","sourceModelVersion","version","width","onOk","handleCopyModel","current","validateFields","then","selectedModelName","SELECTED_MODEL_FIELD","copySource","CREATE_NEW_MODEL_OPTION_VALUE","newModelName","MODEL_NAME_FIELD","createRegisteredModelApi","createModelVersionApi","run_id","tags","mvResult","value","ModelRegistryRoutes","getModelVersionPageRoute","catch","okText","formatMessage","cancelText","onCancel","hideRegisterModal","centered","_Fragment","Typography","Paragraph","css","link","chunks","Link","href","openInNewTab","RegisterModelForm","innerRef","onSearchRegisteredModels","isCopy","DirectTransitionFormImpl","React","render","toStage","this","Form","ref","ACTIVE_STAGES","includes","Item","initialValue","valuePropName","preserve","Checkbox","Tooltip","archiveExistingVersionToolTipText","currentStage","StageTagComponents","archivedStage","Stages","ARCHIVED","DirectTransitionForm","injectIntl","ModelStageTransitionDropdown","constructor","arguments","confirmModalVisible","confirmingActivity","handleConfirm","undefined","transitionFormRef","handleMenuItemClick","activity","onSelect","setState","archiveExistingVersions","Boolean","getFieldValue","handleConfirmModalCancel","getNoneCurrentStages","stages","Object","_","s","getMenu","nonCurrentStages","Menu","map","stage","ActivityTypes","APPLIED_TRANSITION","to_stage","ArrowRightIcon","renderConfirmModal","formComponent","renderActivityDescription","Dropdown","overlay","trigger","ChevronDownIcon","_css","cursor","marginLeft","defaultProps","NONE","_ref2","ModelVersionViewAliasEditor","aliases","modelEntity","onAliasesModified","EditAliasesModal","showEditAliasesModal","useEditRegisteredModelAliasesModal","model","onSuccess","onAddEdit","length","size","alias","ModelVersionAliasTag","compact","icon","PencilIcon","_ref5","_ref6","_ref7","ModelVersionViewImpl","isDeleteModalVisible","isDeleteModalConfirmLoading","showDescriptionEditor","isTagsRequestPending","formRef","handleDeleteConfirm","modelName","showConfirmLoading","deleteModelVersionApi","getModelPageRoute","hideConfirmLoading","showDeleteModal","hideDeleteModal","handleCancelEditDescription","handleSubmitEditDescription","description","handleEditDescription","startEditingDescription","stopPropagation","handleAddTag","setModelVersionTagApi","resetFields","ex","console","error","message","userVisibleError","getUserVisibleError","handleSaveEdit","handleDeleteTag","deleteModelVersionTagApi","renderAliasEditor","_this$props$modelEnti","_this$props$modelEnti2","currentVersion","currentVersionAliases","filter","_ref3","_ref4","Descriptions","label","componentDidMount","pageTitle","updatePageTitle","shouldHideDeleteOption","renderStageDropdown","handleStageTransitionDropdownSelect","status","ModelVersionStatus","READY","current_stage","permissionLevel","permission_level","renderDisabledStage","tooltipContent","modelStagesMigrationGuideLink","StageLabels","placement","InfoIcon","renderRegisteredTimestampDescription","creation_timestamp","formatTimestamp","renderCreatorDescription","user_id","renderLastModifiedDescription","last_updated_timestamp","renderSourceRunDescription","resolveRunLink","renderCopiedFromLink","source","test","sourceParts","split","to","getDescriptions","usingNextModelsUI","item","renderMetadata","renderStatusAlert","status_message","DefaultModelVersionStatusMessages","FAILED_REGISTRATION","Alert","ModelVersionStatusIcons","banner","renderDescriptionEditIcon","runInfo","run_link","target","resolveRunName","_this$props$modelVers","artifactPath","modelSource","runId","_modelSource$match","match","RegExp","extractArtifactPathFromModelSource","runUuid","Routers","getRunPageRoute","experimentId","runDisplayName","substr","renderPomoteModelButton","getPageHeader","breadcrumbs","menu","itemName","disabled","PageHeader","OverflowMenu","schema","versionNum","modelListPageRoute","shouldShowModelsNextUI","ModelsNextUIToggleSwitch","CollapsibleSection","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","showEditor","getVisibleTagValues","EditableTagsTableView","isRequestPending","SchemaTable","okType","mapDispatchToProps","ModelVersionView","connect","mapStateToProps","ownProps","getModelVersionTags","withNextModelsUIContext","ModelVersionPageImpl","listTransitionRequestId","pollIntervalId","initGetModelVersionDetailsRequestId","getRunRequestId","updateModelVersionRequestId","transitionModelVersionStageRequestId","getModelVersionDetailsRequestId","initGetMlModelFileRequestId","criticalInitialRequestIds","pollingRelatedRequestIds","hasPendingPollingRequest","every","requestId","request","apis","active","loadData","isInitialLoading","promises","getModelVersionDetailAndRunInfo","Promise","all","pollData","isBrowserTabVisible","getErrorCode","resolve","transitionModelVersionStageApi","toString","updateModelVersionApi","loadModelDataWithAliases","getRegisteredModelApi","getModelVersionApi","getProtoField","getRunApi","getModelVersionMlModelFile","getModelVersionArtifactApi","content","parseMlModelFile","prevState","setInterval","POLL_INTERVAL","componentDidUpdate","prevProps","componentWillUnmount","clearInterval","PageContainer","RequestStateWrapper","requestIds","loading","hasError","requests","resourceConflictError","getResourceConflictError","ErrorView","statusCode","subMessage","getMessageField","fallbackHomePageReactRoute","shouldRender404","permissionDeniedErrors","_request$error","ErrorCodes","PERMISSION_DENIED","_permissionDeniedErro","errorMsg","triggerError","Spinner","ModelVersionPageWithRouter","withRouterNext","decodeURIComponent","params","getModelVersion","getModelVersionSchemas","getRunInfo","getRunTags","getRunDisplayName","ModelVersionPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY","Option","OptGroup","LegacySelect","CREATE_NEW_MODEL_LABEL","selectedModel","handleModelSelectChange","modelNameValidator","rule","callback","handleFilterOption","option","toLowerCase","indexOf","renderExplanatoryText","explanation","renderModel","creatingNewModel","layout","rules","required","dropdownClassName","onChange","placeholder","filterOption","onSearch","showSearch","style","fontSize","validator","Input","Column","Table","Text","INDENTATION_SPACES","getColumnTypeRepr","columnType","indentationLevel","indentation","repeat","keys","properties","propertyName","property","requiredRepr","propertyRepr","indentOffset","slice","join","items","formatColumnName","spec","optional","requiredTag","bold","color","formatColumnSchema","repr","tensorType","dtype","shape","signatureCodeBlock","SchemaTableImpl","renderSchemaTable","schemaData","schemaType","showHeader","pagination","locale","emptyText","dataSource","getSchemaRowData","columns","dataIndex","key","scroll","y","rowData","forEach","row","index","renderSectionHeader","text","sectionHeaders","inputs","outputs","numInputs","table","numOutputs","theme","designSystemThemeApi","getSchemaTableStyles","rowClassName","defaultExpandAllRows","expandRowByClick","expandedRowRender","record","expandIcon","expanded","onExpand","MinusBoxIcon","PlusSquareIcon","LogModelWithSignatureUrl","rel","x","WithDesignSystemThemeHoc","antTable","padding","overflowX","overflowY","maxWidth","lineHeight","borderColor","colors","borderDecorative","backgroundColor","backgroundSecondary","textPrimary","backgroundPrimary","whiteSpace","spacing","sm","marginTop","marginBottom","query","REGISTERED_MODELS_SEARCH_NAME_FIELD","resolveFilterValue","getCombinedSearchFilter","filters","initialFilter","push","constructSearchInputFromURLState","urlState"],"sourceRoot":""}